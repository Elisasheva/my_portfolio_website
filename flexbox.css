
FLEX

do kontenera przypisujemy: 
{display: flex;}
dodając, tworzymy "flex-container" a w srodku "flex-items"
Po przypisaniu elementy w kontenerze ulozą się OBOK SIEBIE - zgodnie z flex layout
domyslnie elementy są tak szerokie, by zmieścić swoją treść
flex layout ma oś glowną i prostopadla (main i cross exes) - domyslnie os glowna to oś pozioma, ale mozna to zmienic za pomoca flex-direction

.cont { - tę wlasciwosc wpisuje się w STYLOWANIU KONTENERA
flex-direction: row;
flex-direction: row-reverse; - ukladaja sie od prawej do lewej
flex-direction: column; - elementy ukladają się jeden pod drugim, blokowo, os pionowa
flex-direction: column-reverse; - elementy ukladają się od dolu do góry


        STYLOWANIE POSZCZEGOLNYCH ELEMENTOW

flex-basis: 300px; - zmienia szerokość/wysokość elementu w zaleznosci od tego, czy ustawione jest flex-direction: row czy tez column
maksymalne zwiększenie to takie, w ktorym elementy nadal mieszczą się w kontenerze. nie moze wykroczyć poza kontener. domyślnie rozmiar jest zalezny od tresci w elemencie.
moze być % (procent szerokości calego kontenera. jezeli będą dwa elementy i ustawimy na 50%, wtedy zajmą one calą szerokosc)
rozmiar jest bazowy, moze sie zmienic jak dodamy np margines
mozna bylo dodac width i height, ale flex-basis ma wiekszy priorytet i jest wzgledny, czyli dziala w przypadku row i column tak samo, z kolei height definiujemy w column, a width w row.

flex-grow: 1; 2; 3; itd. domyslnie 0 - okresla, ile pozostalego miejsca ma zostac dodane do tego elementu. 
w przypadku wielu elementow o tej samej klasie dodajemy nowa klase do jednego z elementow, ktory chcemy rozszerzyc, i tam przypisujemy flex-grow.
jesli dodamy do jednego elementu flex-grow:1;, rozszerzy się on o cala pozostalą dostępną przestrzeń. Mozna tez przypisywac to do większej ilości elementów na zasadzie proporcji.
Mozna tez w ogóle nie dodawac flex-basis, a do kazdego elementu dodac flex-grow:1; wtedy zajmą one caly kontener ALE kazdy z nich zajmie tyle miejsca, ile potrzebuje, zeby zmiescil się ich kontent! kiedy jest flex-basis, elementy beda rowne niezaleznie od tresci ktora moze się po prostu nie miescic: NaN;

flex-shrink: 1; 2; 3; itd. domyslnie 1 - okresla jak bardzo element moze się skurczyć. 
jeśli określamy flex-basis w px, i jesli określimy tak ze elementy będą za duze w stosunku do kontenera, wtedy wypelnią one po prostu kontener i nie wyjdą poza niego.
ALE jeśli dodamy flex-shrink:0; do elementow, wtedy dostaną one dokladnie tyle px ile okreslone w flex-basis. Wlasciwość 0 nie pozwala im się w ogóle skurczyć. jeśli dodamy do jednego elementu, wtedy ten jeden nie będzie mógl się skurczyć.
mozemy dodac do kazdego elementu inny flex-shrink, np. jeden z nich nie bedzie w ogole sie kurczyl, inny sie skurczy bardziej bo dostanie 2; itd. Dziala tez na zasadzie proporcji.


SKRÓT flex 
- flex-grow, flex-shrink, flex-basis 
  - flex: 0 1 auto - wartosc domyślna, czyli elemeenty sie nie poszerzają, ale się kurczą zeby się zmieścić w linii
  - flex: 1 1 auto - lub samo auto. Rozmiar elementów zalezy od treści wewnątrz i zawsze wypelnia caly kontener. jesli któryś element ma więcej treści, rozszerza się, by ta tresc się zmieścila. bardzo elastyczne.
  - flex: 0 0 auto - lub none - elementy mają rozmiar zalezny od tresci, ale się ani nie zwęzają ani nie poszerzają, nie wypelniają calosci kontenera a tylko są na tyle szerokie by zmiescic tresc. none - czyli brak elastyczności. 
  - flex: 1 0 0 - mozna napisać tez po prostu 1. elementy się porzerzają, ale nigdy się nie kurczą. 0 w flex-basis oznacza, ze kazde ma identyczny rozmiar w osi glownej, identyczna szerokosc. jesli jeden z elementow bedzie mial wiecej tresci, inne sie nie skurczą zeby ten mógl zmiescic tresc. po prostu zostaną takie same a treść się nie zmieści. 
  - flex: 0 0 100px - na sztywno. elementy się ani nie poszerzają zeby wypelnic przestrzen ani nie kurczą zeby sie zmiescic w linii. moga nawet sie nie miescic. czyli elementy będą mialy tyle, ile okreslone w px. 
}


        WYROWNANIE ELEMENTOW

STYLUJEMY KONTENER
align-items: - okresla wyrownanie elementow w osi prostopadlej. domyslnie: stretch, czyli są rozciągnięte. Wpisuje się w stylowaniu KONTENERA.

    { align-items: baseline;
    align-items: center;
    align-items: flex-end;
    align-items: flex-start;

jezeli bedzie flex-direction: column;, align-items bedzie sie odnosilo do wyrownania w poziomie, row - wyrownanie w pionie. }


STYLUJEMY ELEMENT
align-self - pozwala ustawic wyrownanie poszczegolnym elementom. wartości takie same jak align-items, ktore wlasciwie ustawia wszystkim elementom taką samą wartość align-self.
czyli zamiast dodac jakis align-items do kontenera, mozna dodac align-self do stylowania elementow i bedzie to to samo. 
Ale mozna jeden wyrownac inaczej, stylując klasę pojedynczego elementu za pomocą align-self, podczas gdy align-items są inne.


STYLUJEMY KONTENER
justify-content: - wyrownuje elementy w osi glownej. Jeśli jest jakas pusta przestrzen między elementami, wtedy mozemy je ukladac. domyslnie: flex-start

    { justify-content: center; 
    justify-content: flex-end; 
    justify-content: flex-start; 
    justify-content: space-around; - po prawej i lewej stronie od elementu bedzie tyle samo miejsca i kazdy inny element tez bedzie mial tyle samo
    justify-content: space-between; - miejsce pomiędzy elementami jest rowne, ale nie ma przestrzeni między elementem a krawędzią
    justify-content: space-evenly; - przestrzeń miedzy elementami i miedzy elementem a krawędzią będzie rowna. czyli rowne odstępy


order: - zmiana kolejnosci elementow. domyślnie: 0
np. jesli dodamy do ostatniego elementu order: -1; pokaze się on jako pierwszy
jezeli chcemy by jakis pokazal sie przed wszystkimi mozemy dodac jakas ujemną wartość, jezeli na koncu to jakąś dodatnią wartość. mozemy tez ustawiac kazdemu oddzielnie order. przydatne jesli chcemy np dla roznych urządzeń ustawiac rozną kolejnosc.

STYLUJEMY KONTENER
flex-wrap: - określa czy elementy mogą przechodzić do kolejnej linii i w jakim kierunku. Domyslnie: nowrap
wrap - pozwala na przechodzenie do nowej linii
wrap-reverse - odwrotny kierunek;
jesli jakies elementy nie beda sie mieścić w kontenerze, wtedy jak damy wrap będą mogly przechodzić do nowej linii zamiast wystawać lub się zwęzać

align-content: - okresla rozmieszczenie pustej przestrzeni w osi prostopadlej jesli mamy wiele linii. ustala odległość wierszy kontenera od siebie 
jak w justify-content + stretch }

SKRÓT flex-flow
flex-direction i flex-wrap
np. { flex-flow: column wrap; }



_____
cwiczenie:
https://codepen.io/osublake/full/dMLQJr